/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/pcgr Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input/Output options
    input                           = null
    outdir                          = "results"
    save_intermediates              = false

    // Global options for both CPSR & PCGR
    genome                          = null
    database                        = null    // this directory must contain code base i.e: pcgr-1.0.3/ and contain data/${params.genome} database file.
    save_intermediates              = false

    // CPSR specific params
    panel_id                        = 0
    diagnostic_grade_only           = false
    ignore_noncoding                = false
    pop_gnomad                      = 'nfe'
    maf_upper_threshold             = 0.9
    classify_all                    = false
    clinvar_ignore_noncancer        = false

    // PCGR params
    assay                           = null
    fasta                           = null
    cpsr_report                     = null // not boolean since 1.1.0. must be path to Gzipped JSON - file ending with 'cpsr.<genome_assembly>.json.gz' -  germline report of patient's blood/control sample
    tumor_site                      = 0
    tumor_purity                    = null
    tumor_ploidy                    = null
    cna_analysis                    = false
    logr_gain                       = 0.8
    logr_homdel                     = -0.8
    cna_overlap_pct                 = 50
    target_size_mb                  = 34
    estimate_tmb                    = false
    estimate_msi_status             = false
    tmb_algorithm                   = 'all_coding'
    estimate_signatures             = false
    min_mutations_signatures        = 200
    all_reference_signatures        = false
    include_artefact_signatures     = false
    prevalence_reference_signatures = 5
    include_trials                  = true
    tumor_dp_tag                    = null
    tumor_af_tag                    = null
    control_dp_tag                  = null
    control_af_tag                  = null
    call_conf_tag                   = null
    tumor_dp_min                    = 0
    tumor_af_min                    = 0
    control_dp_min                  = 0
    control_af_max                  = 1

    // PCGR tumor only
    tumor_only                      = false
    cell_line                       = false
    pon_vcf                         = null
    exclude_pon                     = false
    exclude_likely_hom_germline     = false
    exclude_likely_het_germline     = false
    exclude_dbsnp_nonsomatic        = false
    exclude_nonexonic               = false
    maf_onekg_eur                   = 0.002
    maf_onekg_amr                   = 0.002
    maf_onekg_afr                   = 0.002
    maf_onekg_eas                   = 0.002
    maf_onekg_sas                   = 0.002
    maf_onekg_global                = 0.002
    maf_gnomad_nfe                  = 0.002
    maf_gnomad_fin                  = 0.002
    maf_gnomad_asj                  = 0.002
    maf_gnomad_oth                  = 0.002
    maf_gnomad_amr                  = 0.002
    maf_gnomad_afr                  = 0.002
    maf_gnomad_eas                  = 0.002
    maf_gnomad_sas                  = 0.002
    maf_gnomad_global               = 0.002

    // Variant filtering
    filter_haplotypecaller            = "-i'FORMAT/DP>10'"
    filter_deepvariant                = "-i'FORMAT/DP>10'"
    filter_strelka_variants           = "-i'FORMAT/DP>10'"
    filter_freebayes_germline         = "-i'FORMAT/DP>10'"
    filter_mutect2                    = "-i'FORMAT/DP>10'"
    filter_freebayes_somatic          = "-i'FORMAT/DP>10'"
    filter_strelka_indels             = "-i'FORMAT/DP>10'"
    filter_strelka_snvs               = "-i'FORMAT/DP>10'"

    // VEP params
    vep_n_forks                     = 4
    vep_buffer_size                 = 500
    vep_gencode_all                 = true
    vep_pick_order                  = 'canonical,appris,biotype,ccds,rank,tsl,length,mane'
    vep_no_intergenic               = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                          = 'results'
    tracedir                        = "${params.outdir}/pipeline_info"
    publish_dir_mode                = 'copy'
    email                           = null
    email_on_fail                   = null
    plaintext_email                 = false
    monochrome_logs                 = false
    help                            = false
    validate_params                 = true
    show_hidden_params              = false
    schema_ignore_params            = 'genomes'

    // Config options
    custom_config_version           = 'master'
    custom_config_base              = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description      = null
    config_profile_contact          = null
    config_profile_url              = null
    config_profile_name             = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                      = '128.GB'
    max_cpus                        = 16
    max_time                        = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/pcgr custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/pcgr.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/pcgr profiles: ${params.custom_config_base}/pipeline/pcgr.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/pcgr'
    author          = 'Barry Digby'
    homePage        = 'https://github.com/nf-core/pcgr'
    description     = 'Downstream variant prioritisation using PCGR/CSPR designed to work off nf-core/sarek outputs'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
